services:
  # PostgreSQL database service
  db:
    image: postgres:17.4
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: flight_gorilla
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./init/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      # - ./init/nation.sql:/docker-entrypoint-initdb.d/2-nation.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service for caching
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # Flask web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: >
      sh -c "
      # Seed the database with initial data
        echo 'Seeding database...' &&
        FLASK_APP=apps:app_flask

        flask seed-nations || echo 'Skipping seed-nations' &&
        flask seed-airports || echo 'Skipping seed-airports' &&
        flask seed-aircraft || echo 'Skipping seed-aircraft' &&
        flask seed-airlines || echo 'Skipping seed-airlines' &&
        flask seed-flights || echo 'Skipping seed-flights' &&
        flask seed-users || echo 'Skipping seed-users' &&

        echo 'Database seeded.' &&

        # Start the application
        echo 'Starting application...' &&
        gunicorn --bind 0.0.0.0:5000 'apps:app_flask' --reload
      "

volumes:
  postgres_data:
  redis_data:
