services:
  # PostgreSQL database service
  db:
    image: postgres:17.4
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: flight_gorilla_ts
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TypeScript/Node.js web application
  web:
    build:
      context: ./backend-ts
      dockerfile: Dockerfile
    env_file:
      - ./backend-ts/.env
    environment:
      - DATABASE_URL="postgresql://postgres:12345@db:5432/flight_gorilla"
      - NODE_ENV=production
      - PORT=5000
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        echo 'Generating Prisma client...' &&
        npm run generate &&
        echo 'Running database migrations...' &&
        npm run migrate:deploy &&
        echo 'Seeding database...' &&
        npm run db:seed || echo 'Skipping database seeding' &&
        
        echo 'Starting TypeScript application...' &&
        npm run start
      "
  
  # Angular frontend application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - web
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider --timeout=10 http://127.0.0.1:80/health 2>/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
